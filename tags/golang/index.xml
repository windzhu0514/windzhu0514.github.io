<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on 一蓑烟雨任平生</title>
    <link>https://ljc.space/tags/golang/</link>
    <description>Recent content in Golang on 一蓑烟雨任平生</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 07 Mar 2019 17:45:27 +0800</lastBuildDate>
    
	<atom:link href="https://ljc.space/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>golang类型转换</title>
      <link>https://ljc.space/post/go-type-convert/</link>
      <pubDate>Thu, 07 Mar 2019 17:45:27 +0800</pubDate>
      
      <guid>https://ljc.space/post/go-type-convert/</guid>
      <description>int &amp;ndash;&amp;gt; string 转换函数：
fmt.Sprintf：格式化范围 math.MinInt64 -&amp;gt; math.MaxInt64
strconv.Itoa：格式化范围 math.MinInt64 -&amp;gt; math.MaxInt64
strconv.FormatInt：格式化范围 math.MinInt64 -&amp;gt; math.MaxInt64
strconv.FormatUint：格式化范围 0 -&amp;gt; math.MaxUint64
fmt.Sprintf(&amp;quot;%d&amp;quot;, math.MinInt64) // &amp;quot;-9223372036854775808&amp;quot; fmt.Sprintf(&amp;quot;%d&amp;quot;, math.MaxInt64) // &amp;quot;9223372036854775807&amp;quot; fmt.Sprintf(&amp;quot;%d&amp;quot;, math.MaxUint64) // constant 18446744073709551615 overflows int strconv.Itoa(math.MinInt64) // &amp;quot;-9223372036854775808&amp;quot; strconv.Itoa(math.MaxInt64) // &amp;quot;9223372036854775807&amp;quot; strconv.Itoa(math.MaxUint64) // constant 18446744073709551615 overflows int strconv.FormatInt(math.MinInt64, 10) // &amp;quot;-9223372036854775808&amp;quot; strconv.FormatInt(math.MaxInt64, 10) // &amp;quot;9223372036854775807&amp;quot; strconv.FormatInt(math.MaxUint64, 10) // constant 18446744073709551615 overflows int64 strconv.FormatUint(math.MaxUint64, 10) // &amp;quot;18446744073709551615&amp;quot;  string &amp;ndash;&amp;gt; int 转换函数：
fmt.Sscanf：格式化范围 math.MinInt64 -&amp;gt; math.MaxUint64
strconv.ParseInt：格式化范围 math.MinInt64 -&amp;gt; math.MaxInt64
strconv.ParseUint：格式化范围 0 -&amp;gt; math.MaxUint64
var n int fmt.Sscanf(&amp;quot;2147483647&amp;quot;, &amp;quot;%d&amp;quot;, &amp;amp;n) // 2147483647 var n32 int32 fmt.Sscanf(&amp;quot;2147483647&amp;quot;, &amp;quot;%d&amp;quot;, &amp;amp;n32) // 2147483647 var n64 int64 fmt.Sscanf(&amp;quot;-9223372036854775808&amp;quot;, &amp;quot;%d&amp;quot;, &amp;amp;n64) // -9223372036854775808 var n64_2 int64 fmt.Sscanf(&amp;quot;9223372036854775807&amp;quot;, &amp;quot;%d&amp;quot;, &amp;amp;n64_2) // 9223372036854775807 var un64 uint64 fmt.Sscanf(&amp;quot;18446744073709551615&amp;quot;, &amp;quot;%d&amp;quot;, &amp;amp;un64) // 18446744073709551615 // bitSize 0, 8, 16, 32, 和 64分别对应int, int8, int16, int32, 和 int64 // math.MaxUint64 18446744073709551615 // math.</description>
    </item>
    
  </channel>
</rss>