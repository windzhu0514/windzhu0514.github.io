<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on 一蓑烟雨任平生</title>
    <link>https://ljc.space/tags/go/</link>
    <description>Recent content in Go on 一蓑烟雨任平生</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 07 Mar 2019 17:45:27 +0800</lastBuildDate>
    
	<atom:link href="https://ljc.space/tags/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>golang类型转换</title>
      <link>https://ljc.space/post/go-type-convert/</link>
      <pubDate>Thu, 07 Mar 2019 17:45:27 +0800</pubDate>
      
      <guid>https://ljc.space/post/go-type-convert/</guid>
      <description>int &amp;ndash;&amp;gt; string 转换函数：
fmt.Sprintf：格式化范围 math.MinInt64 -&amp;gt; math.MaxInt64
strconv.Itoa：格式化范围 math.MinInt64 -&amp;gt; math.MaxInt64
strconv.FormatInt：格式化范围 math.MinInt64 -&amp;gt; math.MaxInt64
strconv.FormatUint：格式化范围 0 -&amp;gt; math.MaxUint64
fmt.Sprintf(&amp;quot;%d&amp;quot;, math.MinInt64) // &amp;quot;-9223372036854775808&amp;quot; fmt.Sprintf(&amp;quot;%d&amp;quot;, math.MaxInt64) // &amp;quot;9223372036854775807&amp;quot; fmt.Sprintf(&amp;quot;%d&amp;quot;, math.MaxUint64) // constant 18446744073709551615 overflows int strconv.Itoa(math.MinInt64) // &amp;quot;-9223372036854775808&amp;quot; strconv.Itoa(math.MaxInt64) // &amp;quot;9223372036854775807&amp;quot; strconv.Itoa(math.MaxUint64) // constant 18446744073709551615 overflows int strconv.FormatInt(math.MinInt64, 10) // &amp;quot;-9223372036854775808&amp;quot; strconv.FormatInt(math.MaxInt64, 10) // &amp;quot;9223372036854775807&amp;quot; strconv.FormatInt(math.MaxUint64, 10) // constant 18446744073709551615 overflows int64 strconv.FormatUint(math.MaxUint64, 10) // &amp;quot;18446744073709551615&amp;quot;  string &amp;ndash;&amp;gt; int 转换函数：
fmt.Sscanf：格式化范围 math.MinInt64 -&amp;gt; math.MaxUint64
strconv.ParseInt：格式化范围 math.MinInt64 -&amp;gt; math.MaxInt64
strconv.ParseUint：格式化范围 0 -&amp;gt; math.MaxUint64
var n int fmt.Sscanf(&amp;quot;2147483647&amp;quot;, &amp;quot;%d&amp;quot;, &amp;amp;n) // 2147483647 var n32 int32 fmt.Sscanf(&amp;quot;2147483647&amp;quot;, &amp;quot;%d&amp;quot;, &amp;amp;n32) // 2147483647 var n64 int64 fmt.Sscanf(&amp;quot;-9223372036854775808&amp;quot;, &amp;quot;%d&amp;quot;, &amp;amp;n64) // -9223372036854775808 var n64_2 int64 fmt.Sscanf(&amp;quot;9223372036854775807&amp;quot;, &amp;quot;%d&amp;quot;, &amp;amp;n64_2) // 9223372036854775807 var un64 uint64 fmt.Sscanf(&amp;quot;18446744073709551615&amp;quot;, &amp;quot;%d&amp;quot;, &amp;amp;un64) // 18446744073709551615 // bitSize 0, 8, 16, 32, 和 64分别对应int, int8, int16, int32, 和 int64 // math.MaxUint64 18446744073709551615 // math.</description>
    </item>
    
    <item>
      <title>goroutine并发控制</title>
      <link>https://ljc.space/post/go-goroutine-concurrent-control/</link>
      <pubDate>Fri, 07 Dec 2018 10:05:37 +0800</pubDate>
      
      <guid>https://ljc.space/post/go-goroutine-concurrent-control/</guid>
      <description>通信 共享内存 func Test() { ordersInfoApp := make([]orderInfoApp, 0, totalCount) var mux sync.Mutex wg := sync.WaitGroup{} for i := 0; i &amp;lt;= 10; i++ { wg.Add(1) go func(pageIndex int) { // do somethine var ordersInfo orderInfoApp mux.Lock() ordersInfoApp = append(ordersInfoApp, ordersInfo) mux.Unlock() wg.Done() }(i) } wg.Wait() }  一般在简单的数据传递下使用
channel func Test() { ordersInfoApp := make([]orderInfoApp, 0, totalCount) choi := make(chan orderInfoApp, 10) wg := sync.WaitGroup{} for i := 0; i &amp;lt;= 10; i++ { wg.Add(1) go func(pageIndex int) { // do somethine var ordersInfo orderInfoApp choi &amp;lt;- ordersInfo wg.Done() }(i) } go func() { wg.Wait() close(choi) }() for v := range choi { ordersInfoApp = append(ordersInfoApp, v) } }  相对复杂的数据流动情况
同步和控制 goroutine 退出只能由本身控制，不能从外部强制结束该 goroutine 两种例外情况：main 函数结束或者程序崩溃结束运行
共享变量控制结束 func main() { running := true f := func() { for running { fmt.Println(&amp;quot;i am running&amp;quot;) time.Sleep(1 * time.Second) } fmt.</description>
    </item>
    
    <item>
      <title>go get添加进度</title>
      <link>https://ljc.space/post/go-get-progress/</link>
      <pubDate>Fri, 30 Nov 2018 14:50:56 +0800</pubDate>
      
      <guid>https://ljc.space/post/go-get-progress/</guid>
      <description>go get 比较大的包时会很慢, 可能几分钟或更长, 让人误以为卡死了. 修改 go 源码包，让 go get 显示进度。
 修改 git clone 命令, 添加 &amp;ndash;progress 选项, 使其输出进度 找到如下代码, createdCmd 字段值修改为 clone &amp;ndash;progress {repo} {dir} 其它命令 hg, svn&amp;hellip;添加进度方法类似
// vcsGit describes how to use Git. var vcsGit = &amp;amp;vcsCmd{ name: &amp;quot;Git&amp;quot;, cmd: &amp;quot;git&amp;quot;, createCmd: &amp;quot;clone {repo} {dir}&amp;quot;, // 此处修改为 clone --progress {repo} {dir} downloadCmd: &amp;quot;pull --ff-only&amp;quot; }  修改 cmd.Run()执行的地方, 使其将输出定位到标准输出流上 找到 run1()方法, 在 cmd.Stderr = &amp;amp;buf 下添加两行, 如:
var buf bytes.Buffer cmd.Stdout = &amp;amp;buf cmd.Stderr = &amp;amp;buf cmd.Stdout = os.Stdout // 重定向标准输出 cmd.Stderr = os.Stderr // 重定向标准输出 err = cmd.Run()   3.执行 golang 源码 src 下的 all.bash 重新编译 golang, 编译要些时间, 编译完后使用 go get 会显示拉取进度。</description>
    </item>
    
  </channel>
</rss>