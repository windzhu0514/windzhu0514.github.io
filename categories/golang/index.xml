<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on 一蓑烟雨任平生</title>
    <link>/categories/golang/</link>
    <description>Recent content in golang on 一蓑烟雨任平生</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 06 Sep 2019 17:40:56 +0800</lastBuildDate>
    
	<atom:link href="/categories/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>caddy-hugo-filebrowser搭建个人网站和后台管理</title>
      <link>/post/website-caddy-hugo-filebrowser/</link>
      <pubDate>Fri, 06 Sep 2019 17:40:56 +0800</pubDate>
      
      <guid>/post/website-caddy-hugo-filebrowser/</guid>
      <description>使用caddy和hugo搭建个人网站 功能： 自动https 自动响应git hook，运行hugo编译markdown 开机启动服务 docker部署</description>
    </item>
    
    <item>
      <title>VSCode Remote Development-go开发环境搭建</title>
      <link>/post/go-vscode-remote-development/</link>
      <pubDate>Mon, 19 Aug 2019 18:54:39 +0800</pubDate>
      
      <guid>/post/go-vscode-remote-development/</guid>
      <description>安装vscode 刚学习go的时候一直使用的vscode开发，轻巧方便。但随着工程代码量增加，本地下载的包越来越多，代码提示和自动补全功能变得</description>
    </item>
    
    <item>
      <title>golang类型转换</title>
      <link>/post/go-type-convert/</link>
      <pubDate>Thu, 07 Mar 2019 17:45:27 +0800</pubDate>
      
      <guid>/post/go-type-convert/</guid>
      <description>int &amp;ndash;&amp;gt; string 转换函数： fmt.Sprintf：格式化范围 math.MinInt64 -&amp;gt; math.MaxInt64 strconv.Itoa：格式化范围 math.MinInt64 -&amp;gt; math.MaxInt64 strconv.FormatInt：格式化</description>
    </item>
    
    <item>
      <title>goroutine并发控制</title>
      <link>/post/go-goroutine-concurrent-control/</link>
      <pubDate>Fri, 07 Dec 2018 10:05:37 +0800</pubDate>
      
      <guid>/post/go-goroutine-concurrent-control/</guid>
      <description>通信 共享内存 func Test() { ordersInfoApp := make([]orderInfoApp, 0, totalCount) var mux sync.Mutex wg := sync.WaitGroup{} for i := 0; i &amp;lt;= 10; i++ { wg.Add(1) go func(pageIndex int) { // do somethine var ordersInfo orderInfoApp mux.Lock() ordersInfoApp = append(ordersInfoApp, ordersInfo) mux.Unlock() wg.Done() }(i) } wg.Wait() } 一般在简单的数据传递下使用 channel func Test() { ordersInfoApp :=</description>
    </item>
    
    <item>
      <title>go get添加进度</title>
      <link>/post/go-get-progress/</link>
      <pubDate>Fri, 30 Nov 2018 14:50:56 +0800</pubDate>
      
      <guid>/post/go-get-progress/</guid>
      <description>go get 比较大的包时会很慢, 可能几分钟或更长, 让人误以为卡死了. 修改 go 源码包，让 go get 显示进度。 修改 git clone 命令, 添加 &amp;ndash;progress 选项, 使其输出进度 找到如下代码</description>
    </item>
    
  </channel>
</rss>