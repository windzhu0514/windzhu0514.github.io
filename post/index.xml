<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 一蓑烟雨任平生</title>
    <link>https://ljc.space/post/</link>
    <description>Recent content in Posts on 一蓑烟雨任平生</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 11 Mar 2019 23:10:32 +0800</lastBuildDate>
    
	<atom:link href="https://ljc.space/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>李开复：留学带给我的十件礼物，第一件是自信</title>
      <link>https://ljc.space/post/likaifu-10-gifts/</link>
      <pubDate>Mon, 11 Mar 2019 23:10:32 +0800</pubDate>
      
      <guid>https://ljc.space/post/likaifu-10-gifts/</guid>
      <description>本文由 简悦 SimpRead 转码， 原文地址 https://mp.weixin.qq.com/s/BLIQNoeB9zFm6DZSpLlYgQ
 今天分享的文章，是我之前的一个演讲，总结了自己从初中到大学的留学生涯得到的十个最大的收获。最近有媒体朋友整理发表，就转载过来。
目的是跟大家分享，如今历经世事的我，再回首成长历程，我发现那些珍贵的、终身受益的东西，不是科学知识，也不是当时引以为傲的成绩榜单，而是那些最基本的，人之所以为人的人格底色。
这些品质和能力，让我在后来的人生中，不断获得新的技能和社会能力，最终塑造了现在的我。
推荐给年轻的父母阅读，打好孩子的品格地基，比那些赢在起跑线上的速成技能要重要的多。而在所有的品格里，自信是第一位的。
以下是演讲的内容整理~
自信
我从小在台湾长大，在那里，老师总是用惩罚的方式告诉我们这个做得不好，要怎么惩罚; 这个达不到，谁又会对你失望。是用威胁、惩罚、失望等等负面刺激的方式来希望学生能做得更好。
美国的教育是这样的一个环境：它完全用正面激励的机制，让学生能够建立自己的自信。美国的教育认为每一个人都有他特别强的地方，所以它的教育方式就是当你在擅长的地方做得好的时候，给你足够的鼓励，让你能够得到自信。
不仅仅是对某一件事情的自信，而是对自己本身的自信，对未来的自信。
我记得有一次老师在黑板上写了 1/7，说你们谁能够换算出来。题目写完我就举手了：0.142857。
他说哎呀，数学天才。其实在座的每个人都知道，不知道大陆有没有背这些数字，我在台湾背过，可不是什么数学天才。当时他一夸，我就想也许我真的是数学天才。从此就对数学产生了浓厚的兴趣，去代表学校参加全州的比赛，拿到了田纳西州的冠军。
当然后来我发现其实我不是数学天才。当我进了哥伦比亚大学的时候，他们把我分到天才班，结果拿了个全班的最后一名。
很有趣的是，老师当时说：开复，你是最后一名。我说完了，最后一名怎么办? 老师给了我一个 A-，我说啊? 最后一名还有 A-，他说你虽然是最后一名，但还是很厉害，一定要给一个 A-。我终于发现我不是天才，但是自信心并没有丢掉。
我觉得自己有能力，就会努力，就会做得很好，这是我的自信，第一件得到的礼物。
信任
当时对强的数学是有自信，但是碰到弱的化学、历史，我根本没有学过，很多单词都不认识，考试很头疼。
我清楚地记得老师跟我说：开复，我知道你今天做不完今天的考题，你拿回家做，你可以用字典，你可以花所有你需要花的时间，3、5 个小时都没关系，但是我相信你不会翻开教科书。
无私的教育
我这里有两个例子。
第一个例子是我刚开始读初一的时候，上课我根本一个字都听不懂，当时我们的校长发现了这个情况以后，他就说每天中午你把午餐拿到我的办公室来，我们一边吃午餐，我一边从小学一年级的英文课本开始教你。一个学校的校长每天愿意花中午的时间无私教我，一直到我跟上其他同学的学习进度。
我还记得第二件事，我一直以为自己是一个数学天才，差不多在十年级的时候把高中所有的课都念完了。我当时高中的老师跟我说，你下面应该读大学的课程。我说可是开车要 30 分钟，我现在不能开车，老师说没关系，我教这个课，每天我到你家接你。这个老师每次上课，每个星期三次，来我家接我，让我在 11、12 年级能够修到两门大学的数学微积分。
我为老师的无私精神也非常非常感动。
实践
我非常相信那句话：看过的你会忘记，听过的你会记得，但是做过的你才能真正理解。
我在高中参加了一个创业活动，活动需要我们一帮人创一个公司，选谁是领导者，决定做什么产品，大家一起来合作，把产品推销出去。让家长出钱资助我们，当股东，资助不是白拿的，到一年做完项目以后，要算上每一个股东应还他多少钱，要算股息等等。
真的像一个公司来运营，那时我们感觉真的特别有意思。而且我们做的项目当时也很有意思，这也间接地代表了美国学校的一种开放和包容。
当时学校把午餐的时间缩短，从 1 个小时缩到 40 分钟，我们这些学生就觉得这很不好，我们要抗议。怎么抗议呢? 我们在这个创业活动中就做了一个 T 恤，T 恤上画了一个腊肠狗，画得很长。
这是一个不太激进的抗议，所有学生都非常想买这个 T 恤，我们印了很多很多，当年我们也成为了全州业绩最好的一个公司，当然学校其实也非常包容我们的这种做法，并没有打压我们，允许我们把自己的声音发出来，虽然到最后午餐的时间还是没有增加。
兴趣
在哥伦比亚，我学到很多。如果说学到最重要的一件事情，我认为应该是兴趣，这是第五件我得到的美国留学的礼物。
因为我进去的时候其实并不知道自己真的喜欢什么，我选了双专业，数学和法律。很奇怪的两个专业，数学我觉得我是天才，法学我觉得看电视上那些律师都很酷，尤其当时美国有一个节目叫做《轮椅神探》，我就觉得这是我的偶像。其实就跟今天的中学生一样，其实很迷茫，并不知道自己感兴趣的专业是什么、职业是什么，只是随机选了两个。
读了一年多以后才发现，其实我不是数学天才，而且我觉得不是天才的人读数学没有什么意思。跟那些人上课，他们那一班都是天才班，一共有 7 个人，我是第七名，前六个人每天都告诉我数学多美，我就想不出什么地方美，就做一些题目而已，觉得不适合做数学。
法律每次上课就想睡觉，也不适合学法律，那就糟了。还好，当时学校是允许换专业的，而且学校鼓励我们自己选修课程。所以，当时我很幸运地选修了电脑，我觉得这个才是我真正有兴趣的事情。学校就有这种宽容，让我能够改变我的专业，我真的非常非常感谢，有这样一个宽容的环境，让我来在大三的时候做一个选择，能够追随我的兴趣。
我在哥伦比亚读了四年，就到了另一个学校去读计算机的 PHD。在这里我得到了更多，可能更多像是中国留学生出去的体验，当然我的英文可能更好一些。我在这里看到了很多震撼，让我对教育和留学能够得到的有了一个深的层次的理解。
第六个我得到的礼物就是平等，也就是老师跟同学之间是平等的。
我做助教的时候有一个机会，给学生讲课，当时我就觉得讲得很好，因为我在很短的时间就让这些学生学了很深的计算机技术，我就觉得我知道自己是一个很好的工程师，我也是一个不错的研究员，因此我一定是很好的老师。
但是很不幸的是学生发回来的给老师的评语，让我非常震惊，他们不但给我最低的分数，而且给我取了很多绰号，他们说开复的课叫做开复剧场，他一个人在上面演戏，我们全部都在下面睡觉，他们说来这儿的人什么目光接触也不会，每天眼睛看着黑板，也不看着我们，我们在打瞌睡，教的是最差的，没有见过这么差的老师。</description>
    </item>
    
    <item>
      <title>golang类型转换</title>
      <link>https://ljc.space/post/go-type-convert/</link>
      <pubDate>Thu, 07 Mar 2019 17:45:27 +0800</pubDate>
      
      <guid>https://ljc.space/post/go-type-convert/</guid>
      <description>int &amp;ndash;&amp;gt; string 转换函数：
fmt.Sprintf：格式化范围 math.MinInt64 -&amp;gt; math.MaxInt64
strconv.Itoa：格式化范围 math.MinInt64 -&amp;gt; math.MaxInt64
strconv.FormatInt：格式化范围 math.MinInt64 -&amp;gt; math.MaxInt64
strconv.FormatUint：格式化范围 0 -&amp;gt; math.MaxUint64
fmt.Sprintf(&amp;quot;%d&amp;quot;, math.MinInt64) // &amp;quot;-9223372036854775808&amp;quot; fmt.Sprintf(&amp;quot;%d&amp;quot;, math.MaxInt64) // &amp;quot;9223372036854775807&amp;quot; fmt.Sprintf(&amp;quot;%d&amp;quot;, math.MaxUint64) // constant 18446744073709551615 overflows int strconv.Itoa(math.MinInt64) // &amp;quot;-9223372036854775808&amp;quot; strconv.Itoa(math.MaxInt64) // &amp;quot;9223372036854775807&amp;quot; strconv.Itoa(math.MaxUint64) // constant 18446744073709551615 overflows int strconv.FormatInt(math.MinInt64, 10) // &amp;quot;-9223372036854775808&amp;quot; strconv.FormatInt(math.MaxInt64, 10) // &amp;quot;9223372036854775807&amp;quot; strconv.FormatInt(math.MaxUint64, 10) // constant 18446744073709551615 overflows int64 strconv.FormatUint(math.MaxUint64, 10) // &amp;quot;18446744073709551615&amp;quot;  string &amp;ndash;&amp;gt; int 转换函数：</description>
    </item>
    
    <item>
      <title>git多账户共存</title>
      <link>https://ljc.space/post/multiple-git-account/</link>
      <pubDate>Sat, 12 Jan 2019 22:48:32 +0800</pubDate>
      
      <guid>https://ljc.space/post/multiple-git-account/</guid>
      <description>问题 很多开发者都会遇到在自己的电脑上使用不止一个 git 帐号的情况。一般一个是自己的 github 帐号，另一个则是公司的 git 帐号，比如 gitlab、bitbucket 等。如果采用 https 方式获取仓库，多个 git 帐号间不会有冲突，但在每次 pull、push 的时候都要输入帐号密码，十分麻烦。而且当代码库十分庞大时，如果仍然采用 https 方式，在 git pull 时可能出现超时不响应的情况，此时只能采用 ssh 方式。ssh 在配置完 ssh key 后使用起来很方便，但是 git 帐号间可能出现冲突，这时候该如何解决呢？
配置 ssh key 的方式此处不再赘述，假设在 .ssh 文件夹下有 id_rsa、id_rsa.pub、gitlab_id_rsa、gitlab_id_rsa.pub，分别对应个人 github 帐号私钥公钥以及公司 git 帐号私钥公钥。如果不进行设置，使用 github 账号时没有问题，但是使用公司账号时，由于默认情况下私钥存放在 id_rsa 文件中，因此 git 仍会尝试用 id_rsa 中而不是 gitlab_id_rsa 中的私钥去与服务器上添加的公钥进行比对，自然而然会报错。通常这种情况下 git 会让你输入密码，就算输入正确密码也会报错：Permission denied。
解决方法 ssh 的 config 文件：该文件的主要作用是指明各个 git 帐号对应的 User 以及 IdentityFile 的文件位置。Window 系统中，该配置信息存放在名为 config 的文件中，位置在 USERPROFILE/.ssh/目录下，而在 Linux/Unix 系统中配置信息则保存在 ssh_config 文件中，至于位置不同系统有所区别。可以使用以下命令查看文件位置，第二行打印了配置文件的位置。</description>
    </item>
    
    <item>
      <title>goroutine并发控制</title>
      <link>https://ljc.space/post/go-goroutine-concurrent-control/</link>
      <pubDate>Fri, 07 Dec 2018 10:05:37 +0800</pubDate>
      
      <guid>https://ljc.space/post/go-goroutine-concurrent-control/</guid>
      <description>通信 共享内存 func Test() { ordersInfoApp := make([]orderInfoApp, 0, totalCount) var mux sync.Mutex wg := sync.WaitGroup{} for i := 0; i &amp;lt;= 10; i++ { wg.Add(1) go func(pageIndex int) { // do somethine var ordersInfo orderInfoApp mux.Lock() ordersInfoApp = append(ordersInfoApp, ordersInfo) mux.Unlock() wg.Done() }(i) } wg.Wait() }  一般在简单的数据传递下使用
channel func Test() { ordersInfoApp := make([]orderInfoApp, 0, totalCount) choi := make(chan orderInfoApp, 10) wg := sync.WaitGroup{} for i := 0; i &amp;lt;= 10; i++ { wg.</description>
    </item>
    
    <item>
      <title>go get添加进度</title>
      <link>https://ljc.space/post/go-get-progress/</link>
      <pubDate>Fri, 30 Nov 2018 14:50:56 +0800</pubDate>
      
      <guid>https://ljc.space/post/go-get-progress/</guid>
      <description>go get 比较大的包时会很慢, 可能几分钟或更长, 让人误以为卡死了. 修改 go 源码包，让 go get 显示进度。
 修改 git clone 命令, 添加 &amp;ndash;progress 选项, 使其输出进度 找到如下代码, createdCmd 字段值修改为 clone &amp;ndash;progress {repo} {dir} 其它命令 hg, svn&amp;hellip;添加进度方法类似  // vcsGit describes how to use Git. var vcsGit = &amp;amp;vcsCmd{ name: &amp;quot;Git&amp;quot;, cmd: &amp;quot;git&amp;quot;, createCmd: &amp;quot;clone {repo} {dir}&amp;quot;, // 此处修改为 clone --progress {repo} {dir} downloadCmd: &amp;quot;pull --ff-only&amp;quot; }   修改 cmd.Run()执行的地方, 使其将输出定位到标准输出流上 找到 run1()方法, 在 cmd.Stderr = &amp;amp;buf 下添加两行, 如:</description>
    </item>
    
    <item>
      <title>Markdown 基本语法</title>
      <link>https://ljc.space/post/markdown/</link>
      <pubDate>Thu, 29 Nov 2018 18:15:07 +0800</pubDate>
      
      <guid>https://ljc.space/post/markdown/</guid>
      <description>Welcome to Leanote! 欢迎来到 Leanote! 1. 排版 粗体 斜体
这是一段错误的文本。
引用:
 引用 Leanote 官方的话, 为什么要做 Leanote, 原因是&amp;hellip;
 有充列表:
 支持 Vim 支持 Emacs  无序列表:
 项目 1 项目 2  2. 图片与链接 图片: 链接:
这是去往 Leanote 官方博客的链接
3. 标题 以下是各级标题, 最多支持 5 级标题
# h1 ## h2 ### h3 #### h4 ##### h4 ###### h5  4. 代码 示例:
function get(key) { return m[key]; }  代码高亮示例:</description>
    </item>
    
  </channel>
</rss>